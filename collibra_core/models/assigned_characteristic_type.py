# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from collibra_core.configuration import Configuration


class AssignedCharacteristicType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'minimum_occurrences': 'int',
        'maximum_occurrences': 'int',
        'assigned_resource_id': 'str',
        'system': 'bool',
        'read_only': 'bool',
        'id': 'str'
    }

    attribute_map = {
        'minimum_occurrences': 'minimumOccurrences',
        'maximum_occurrences': 'maximumOccurrences',
        'assigned_resource_id': 'assignedResourceId',
        'system': 'system',
        'read_only': 'readOnly',
        'id': 'id'
    }

    def __init__(self, minimum_occurrences=None, maximum_occurrences=None, assigned_resource_id=None, system=None, read_only=None, id=None, local_vars_configuration=None):  # noqa: E501
        """AssignedCharacteristicType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._minimum_occurrences = None
        self._maximum_occurrences = None
        self._assigned_resource_id = None
        self._system = None
        self._read_only = None
        self._id = None
        self.discriminator = None

        if minimum_occurrences is not None:
            self.minimum_occurrences = minimum_occurrences
        if maximum_occurrences is not None:
            self.maximum_occurrences = maximum_occurrences
        if assigned_resource_id is not None:
            self.assigned_resource_id = assigned_resource_id
        if system is not None:
            self.system = system
        if read_only is not None:
            self.read_only = read_only
        if id is not None:
            self.id = id

    @property
    def minimum_occurrences(self):
        """Gets the minimum_occurrences of this AssignedCharacteristicType.  # noqa: E501


        :return: The minimum_occurrences of this AssignedCharacteristicType.  # noqa: E501
        :rtype: int
        """
        return self._minimum_occurrences

    @minimum_occurrences.setter
    def minimum_occurrences(self, minimum_occurrences):
        """Sets the minimum_occurrences of this AssignedCharacteristicType.


        :param minimum_occurrences: The minimum_occurrences of this AssignedCharacteristicType.  # noqa: E501
        :type: int
        """

        self._minimum_occurrences = minimum_occurrences

    @property
    def maximum_occurrences(self):
        """Gets the maximum_occurrences of this AssignedCharacteristicType.  # noqa: E501


        :return: The maximum_occurrences of this AssignedCharacteristicType.  # noqa: E501
        :rtype: int
        """
        return self._maximum_occurrences

    @maximum_occurrences.setter
    def maximum_occurrences(self, maximum_occurrences):
        """Sets the maximum_occurrences of this AssignedCharacteristicType.


        :param maximum_occurrences: The maximum_occurrences of this AssignedCharacteristicType.  # noqa: E501
        :type: int
        """

        self._maximum_occurrences = maximum_occurrences

    @property
    def assigned_resource_id(self):
        """Gets the assigned_resource_id of this AssignedCharacteristicType.  # noqa: E501


        :return: The assigned_resource_id of this AssignedCharacteristicType.  # noqa: E501
        :rtype: str
        """
        return self._assigned_resource_id

    @assigned_resource_id.setter
    def assigned_resource_id(self, assigned_resource_id):
        """Sets the assigned_resource_id of this AssignedCharacteristicType.


        :param assigned_resource_id: The assigned_resource_id of this AssignedCharacteristicType.  # noqa: E501
        :type: str
        """

        self._assigned_resource_id = assigned_resource_id

    @property
    def system(self):
        """Gets the system of this AssignedCharacteristicType.  # noqa: E501


        :return: The system of this AssignedCharacteristicType.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this AssignedCharacteristicType.


        :param system: The system of this AssignedCharacteristicType.  # noqa: E501
        :type: bool
        """

        self._system = system

    @property
    def read_only(self):
        """Gets the read_only of this AssignedCharacteristicType.  # noqa: E501


        :return: The read_only of this AssignedCharacteristicType.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this AssignedCharacteristicType.


        :param read_only: The read_only of this AssignedCharacteristicType.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def id(self):
        """Gets the id of this AssignedCharacteristicType.  # noqa: E501


        :return: The id of this AssignedCharacteristicType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssignedCharacteristicType.


        :param id: The id of this AssignedCharacteristicType.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignedCharacteristicType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssignedCharacteristicType):
            return True

        return self.to_dict() != other.to_dict()
